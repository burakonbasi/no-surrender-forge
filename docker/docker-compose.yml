services:
  mongo:
    image: mongo:5
    container_name: ns_mongo
    restart: unless-stopped
    ports:
      - "${MONGO_PORT:-27017}:27017"
    environment:
      MONGO_INITDB_DATABASE: ns_case
    volumes:
      - mongo_data:/data/db
    networks:
      - ns_network

  redis:
    image: redis:7-alpine
    container_name: ns_redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - ns_network

  api:
    build:
      context: ../
      dockerfile: docker/Dockerfile.api
      target: development
    container_name: ns_api
    restart: unless-stopped
    ports:
      - "${API_PORT:-3001}:3001"
    environment:
      - MONGODB_URI=${MONGODB_URI}
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET=${JWT_SECRET}
      - NODE_ENV=${NODE_ENV:-development}
    depends_on:
      - mongo
      - redis
    volumes:
      # Source code için volume mount
      - ../apps/api:/app/apps/api:delegated
      - ../packages:/app/packages:delegated
      # node_modules'i exclude et
      - /app/apps/api/node_modules
      - /app/node_modules
    networks:
      - ns_network

  web:
    build:
      context: ../
      dockerfile: docker/Dockerfile.web
      target: development
    container_name: ns_web
    restart: unless-stopped
    ports:
      - "${WEB_PORT:-3000}:3000"
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - NODE_ENV=${NODE_ENV:-development}
    depends_on:
      - api
    volumes:
      # Source code için volume mount
      - ../apps/web:/app/apps/web:delegated
      - ../packages:/app/packages:delegated
      # node_modules'i exclude et
      - /app/apps/web/node_modules
      - /app/node_modules
    networks:
      - ns_network

networks:
  ns_network:
    driver: bridge

volumes:
  mongo_data: